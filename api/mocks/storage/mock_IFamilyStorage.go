// Code generated by mockery v2.40.1. DO NOT EDIT.

package storage

import (
	context "context"

	models "github.com/sebboness/yektaspoints/models"
	mock "github.com/stretchr/testify/mock"
)

// MockIFamilyStorage is an autogenerated mock type for the IFamilyStorage type
type MockIFamilyStorage struct {
	mock.Mock
}

type MockIFamilyStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIFamilyStorage) EXPECT() *MockIFamilyStorage_Expecter {
	return &MockIFamilyStorage_Expecter{mock: &_m.Mock}
}

// GetFamilyMembersByUserIDs provides a mock function with given fields: ctx, family_id, user_ids
func (_m *MockIFamilyStorage) GetFamilyMembersByUserIDs(ctx context.Context, family_id string, user_ids []string) (models.Family, error) {
	ret := _m.Called(ctx, family_id, user_ids)

	if len(ret) == 0 {
		panic("no return value specified for GetFamilyMembersByUserIDs")
	}

	var r0 models.Family
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (models.Family, error)); ok {
		return rf(ctx, family_id, user_ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) models.Family); ok {
		r0 = rf(ctx, family_id, user_ids)
	} else {
		r0 = ret.Get(0).(models.Family)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, family_id, user_ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFamilyStorage_GetFamilyMembersByUserIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamilyMembersByUserIDs'
type MockIFamilyStorage_GetFamilyMembersByUserIDs_Call struct {
	*mock.Call
}

// GetFamilyMembersByUserIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - family_id string
//   - user_ids []string
func (_e *MockIFamilyStorage_Expecter) GetFamilyMembersByUserIDs(ctx interface{}, family_id interface{}, user_ids interface{}) *MockIFamilyStorage_GetFamilyMembersByUserIDs_Call {
	return &MockIFamilyStorage_GetFamilyMembersByUserIDs_Call{Call: _e.mock.On("GetFamilyMembersByUserIDs", ctx, family_id, user_ids)}
}

func (_c *MockIFamilyStorage_GetFamilyMembersByUserIDs_Call) Run(run func(ctx context.Context, family_id string, user_ids []string)) *MockIFamilyStorage_GetFamilyMembersByUserIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockIFamilyStorage_GetFamilyMembersByUserIDs_Call) Return(_a0 models.Family, _a1 error) *MockIFamilyStorage_GetFamilyMembersByUserIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFamilyStorage_GetFamilyMembersByUserIDs_Call) RunAndReturn(run func(context.Context, string, []string) (models.Family, error)) *MockIFamilyStorage_GetFamilyMembersByUserIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamilyUsers provides a mock function with given fields: ctx, family_id
func (_m *MockIFamilyStorage) GetFamilyUsers(ctx context.Context, family_id string) ([]models.FamilyUser, error) {
	ret := _m.Called(ctx, family_id)

	if len(ret) == 0 {
		panic("no return value specified for GetFamilyUsers")
	}

	var r0 []models.FamilyUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.FamilyUser, error)); ok {
		return rf(ctx, family_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.FamilyUser); ok {
		r0 = rf(ctx, family_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FamilyUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, family_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFamilyStorage_GetFamilyUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamilyUsers'
type MockIFamilyStorage_GetFamilyUsers_Call struct {
	*mock.Call
}

// GetFamilyUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - family_id string
func (_e *MockIFamilyStorage_Expecter) GetFamilyUsers(ctx interface{}, family_id interface{}) *MockIFamilyStorage_GetFamilyUsers_Call {
	return &MockIFamilyStorage_GetFamilyUsers_Call{Call: _e.mock.On("GetFamilyUsers", ctx, family_id)}
}

func (_c *MockIFamilyStorage_GetFamilyUsers_Call) Run(run func(ctx context.Context, family_id string)) *MockIFamilyStorage_GetFamilyUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIFamilyStorage_GetFamilyUsers_Call) Return(_a0 []models.FamilyUser, _a1 error) *MockIFamilyStorage_GetFamilyUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFamilyStorage_GetFamilyUsers_Call) RunAndReturn(run func(context.Context, string) ([]models.FamilyUser, error)) *MockIFamilyStorage_GetFamilyUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UserBelongsToFamily provides a mock function with given fields: ctx, user_id, family_id
func (_m *MockIFamilyStorage) UserBelongsToFamily(ctx context.Context, user_id string, family_id string) (bool, error) {
	ret := _m.Called(ctx, user_id, family_id)

	if len(ret) == 0 {
		panic("no return value specified for UserBelongsToFamily")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, user_id, family_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, user_id, family_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user_id, family_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFamilyStorage_UserBelongsToFamily_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserBelongsToFamily'
type MockIFamilyStorage_UserBelongsToFamily_Call struct {
	*mock.Call
}

// UserBelongsToFamily is a helper method to define mock.On call
//   - ctx context.Context
//   - user_id string
//   - family_id string
func (_e *MockIFamilyStorage_Expecter) UserBelongsToFamily(ctx interface{}, user_id interface{}, family_id interface{}) *MockIFamilyStorage_UserBelongsToFamily_Call {
	return &MockIFamilyStorage_UserBelongsToFamily_Call{Call: _e.mock.On("UserBelongsToFamily", ctx, user_id, family_id)}
}

func (_c *MockIFamilyStorage_UserBelongsToFamily_Call) Run(run func(ctx context.Context, user_id string, family_id string)) *MockIFamilyStorage_UserBelongsToFamily_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIFamilyStorage_UserBelongsToFamily_Call) Return(_a0 bool, _a1 error) *MockIFamilyStorage_UserBelongsToFamily_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFamilyStorage_UserBelongsToFamily_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockIFamilyStorage_UserBelongsToFamily_Call {
	_c.Call.Return(run)
	return _c
}

// UserHasAccessToChild provides a mock function with given fields: ctx, family_id, user_id, child_id
func (_m *MockIFamilyStorage) UserHasAccessToChild(ctx context.Context, family_id string, user_id string, child_id string) (bool, error) {
	ret := _m.Called(ctx, family_id, user_id, child_id)

	if len(ret) == 0 {
		panic("no return value specified for UserHasAccessToChild")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, family_id, user_id, child_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, family_id, user_id, child_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, family_id, user_id, child_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIFamilyStorage_UserHasAccessToChild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHasAccessToChild'
type MockIFamilyStorage_UserHasAccessToChild_Call struct {
	*mock.Call
}

// UserHasAccessToChild is a helper method to define mock.On call
//   - ctx context.Context
//   - family_id string
//   - user_id string
//   - child_id string
func (_e *MockIFamilyStorage_Expecter) UserHasAccessToChild(ctx interface{}, family_id interface{}, user_id interface{}, child_id interface{}) *MockIFamilyStorage_UserHasAccessToChild_Call {
	return &MockIFamilyStorage_UserHasAccessToChild_Call{Call: _e.mock.On("UserHasAccessToChild", ctx, family_id, user_id, child_id)}
}

func (_c *MockIFamilyStorage_UserHasAccessToChild_Call) Run(run func(ctx context.Context, family_id string, user_id string, child_id string)) *MockIFamilyStorage_UserHasAccessToChild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockIFamilyStorage_UserHasAccessToChild_Call) Return(_a0 bool, _a1 error) *MockIFamilyStorage_UserHasAccessToChild_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIFamilyStorage_UserHasAccessToChild_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *MockIFamilyStorage_UserHasAccessToChild_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIFamilyStorage creates a new instance of MockIFamilyStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIFamilyStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIFamilyStorage {
	mock := &MockIFamilyStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
